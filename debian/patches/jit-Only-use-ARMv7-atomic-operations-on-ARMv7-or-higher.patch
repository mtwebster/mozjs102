From: Mike Hommey <mh+mozilla@glandium.org>
Date: Mon, 19 Sep 2022 23:21:24 +0100
Subject: Bug 1786619 - Use fallback atomic operations on ARM < v7. r=jandem

Forwarded: https://phabricator.services.mozilla.com/D157612
Applied-upstream: 107, commit:https://hg.mozilla.org/mozilla-central/rev/fc934c3360f4
Applied-upstream: 102.4, commit:https://hg.mozilla.org/releases/mozilla-esr102/rev/470147864827
Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1786619
Bug-Debian: https://bugs.debian.org/1017961
---
 js/src/jit/GenerateAtomicOperations.py                 | 4 +++-
 js/src/jit/shared/AtomicOperations-feeling-lucky-gcc.h | 7 ++++++-
 2 files changed, 9 insertions(+), 2 deletions(-)

diff --git a/js/src/jit/GenerateAtomicOperations.py b/js/src/jit/GenerateAtomicOperations.py
index 58affd7..a468d19 100644
--- a/js/src/jit/GenerateAtomicOperations.py
+++ b/js/src/jit/GenerateAtomicOperations.py
@@ -721,7 +721,9 @@ namespace jit {
 
 def generate_atomics_header(c_out):
     contents = ""
-    if cpu_arch in ("x86", "x86_64", "arm", "aarch64"):
+    if cpu_arch in ("x86", "x86_64", "aarch64") or (
+        cpu_arch == "arm" and int(buildconfig.substs["ARM_ARCH"]) >= 7
+    ):
         contents += "#define JS_HAVE_GENERATED_ATOMIC_OPS 1"
 
         # `fence` performs a full memory barrier.
diff --git a/js/src/jit/shared/AtomicOperations-feeling-lucky-gcc.h b/js/src/jit/shared/AtomicOperations-feeling-lucky-gcc.h
index 2e38433..8f700aa 100644
--- a/js/src/jit/shared/AtomicOperations-feeling-lucky-gcc.h
+++ b/js/src/jit/shared/AtomicOperations-feeling-lucky-gcc.h
@@ -31,7 +31,8 @@
 // Explicitly exclude tier-1 platforms.
 
 #if (defined(__x86_64__) || defined(_M_X64) || defined(__i386__) || \
-     defined(_M_IX86) || defined(__arm__) || defined(__aarch64__))
+     defined(_M_IX86) || (defined(__arm__) && __ARM_ARCH >= 7) ||   \
+     defined(__aarch64__))
 #  error "Do not use on a tier-1 platform where inline assembly is available"
 #endif
 
@@ -56,6 +57,10 @@
 #  define HAS_64BIT_LOCKFREE
 #endif
 
+#if defined(__arm__)
+#  define HAS_64BIT_ATOMICS
+#endif
+
 #if defined(__ppc64__) || defined(__PPC64__) || defined(__ppc64le__) || \
     defined(__PPC64LE__)
 #  define HAS_64BIT_ATOMICS
